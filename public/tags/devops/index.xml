<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>orioninsist - Devops</title>
    <link>https://orioninsist.org/tags/devops/</link>
    <description>Devops RSS feed</description>
    <generator>Hugo</generator>
    
    <item>
      <title>Docker Cli Essential Commands</title>
      <link>https://orioninsist.org/blog/2024-04/docker-cli-essential-commands/</link>
      <pubDate>Mon, 08 Apr 2024 00:25:24 &#43;03</pubDate>
      <description>Docker has become a cornerstone of modern application development. By containerizing applications, Docker streamlines deployment, simplifies collaboration, and promotes portability. This blog post delves into some fundamental Docker commands you&rsquo;ll encounter frequently.
Listing Docker Containers sudo docker container ls -a --no-trunc List all containers (including exited ones) without truncating names sudo docker container ls -a --no-trunc sudo docker container ls -a List all containers (running and stopped) sudo docker container ls -a sudo docker container ls -a -q List only container IDs sudo docker container ls -a -q sudo docker container ls -l List containers with detailed information sudo docker container ls -l sudo docker container ls -a --filter &#34;&#34; List containers based on filters (example: &ndash;filter status=running) sudo docker container ls -a --filter &#34;&#34; Running a Container sudo docker container run centos:7 ping 127.0.0.1 -c 10 Run a single instance of centos:7 image and execute ping command sudo docker container run centos:7 ping 127.0.0.1 -c 10 Viewing Container Information sudo docker ps List all running containers sudo docker ps sudo docker ps -a List all containers (running and stopped) with ps sudo docker ps -a Starting and Stopping Containers sudo docker container run -d centos:7 ping 127.0.0.1 Run a container in detached mode (background) sudo docker container run -d centos:7 ping 127.0.0.1 sudo docker ps Verify the container is running (after running in detached mode) sudo docker ps Inspecting Container Logs sudo docker container logs [containerid] View logs of a specific container (replace [containerid] with actual ID) sudo docker container logs [containerid] sudo docker container logs --tail [containerid] View only the most recent logs of a container (replace [containerid] with actual ID) sudo docker container logs --tail [containerid] sudo docker container logs --tail 10 [containerid] sudo docker container logs -f [containerid] Follow container logs in real-time (replace [containerid] with actual ID) sudo docker container logs -f [containerid] Additional Commands sudo docker container start [containerid]: Starts a stopped container. sudo docker container stop [containerid]: Stops a running container. sudo docker container rm [containerid]: Removes a container. Conclusion This blog post provides a brief overview of essential Docker commands. By mastering these commands, you&rsquo;ll be well on your way to effectively managing containers and building robust applications with Docker. Note: Replace [containerid] with the actual ID of the container whenever applicable in the commands.
</description>
    </item>
    
    <item>
      <title>Docker a Comprehensive Guide to the Basic Commands</title>
      <link>https://orioninsist.org/project/devops/2023/2023-11/docker-a-comprehensive-guide-to-the-basic-commands/</link>
      <pubDate>Sat, 04 Nov 2023 10:03:08 &#43;03</pubDate>
      <description>Docker is a powerful tool for containerizing applications. It allows developers to package their applications and all their dependencies into a single image, which can then be run on any machine that has Docker installed.
This guide will teach you the basic Docker commands you need to get started with containerization. We will cover the following topics:
What is Docker? Docker commands Understanding the output of Docker commands Troubleshooting Docker problems What is Docker? Docker is a containerization platform that allows you to package your application and all its dependencies into a single image. This image can then be run on any machine that has Docker installed.
</description>
    </item>
    
    <item>
      <title>How to Install Docker Desktop on Debian</title>
      <link>https://orioninsist.org/blog/how-to-install-docker-desktop-on-debian/</link>
      <pubDate>Sun, 08 Oct 2023 23:20:30 &#43;03</pubDate>
      <description>Docker is a powerful platform that allows you to develop, ship, and run applications inside containers. Installing Docker on Debian is a straightforward process, and in this guide, we&rsquo;ll walk you through the steps to get Docker Desktop up and running on your Debian-based system.
Prerequisites Before we begin, make sure you have the following prerequisites in place: A Debian-based system (such as Debian itself or Ubuntu) Administrative (sudo) privileges
</description>
    </item>
    
    <item>
      <title>What Is Docker</title>
      <link>https://orioninsist.org/blog/what-is-docker/</link>
      <pubDate>Fri, 06 Oct 2023 11:36:05 &#43;03</pubDate>
      <description>Introduction Docker is a containerization platform that simplifies software development and deployment. It allows you to package applications and their dependencies into lightweight, portable containers. These containers ensure consistent performance across different environments.
Key Concepts Containers: Docker uses containers to encapsulate applications and dependencies, ensuring they run consistently.
Images: Docker containers are built from images, which are read-only templates containing everything needed to run an application.
Dockerfile: A Dockerfile is a script used to create Docker images, specifying the application and its environment.
</description>
    </item>
    
  </channel>
</rss>
